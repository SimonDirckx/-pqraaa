//
// Copyright (c) 2002--2010
// Toon Knapen, Karl Meerbergen, Kresimir Fresl,
// Thomas Klimpel and Rutger ter Borg
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// THIS FILE IS AUTOMATICALLY GENERATED
// PLEASE DO NOT EDIT!
//

#ifndef BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_HPTRD_HPP
#define BOOST_NUMERIC_BINDINGS_LAPACK_COMPUTATIONAL_HPTRD_HPP

#include <cassert>
#include <boost/numeric/bindings/begin.hpp>
#include <boost/numeric/bindings/is_mutable.hpp>
#include <boost/numeric/bindings/remove_imaginary.hpp>
#include <boost/numeric/bindings/size.hpp>
#include <boost/numeric/bindings/stride.hpp>
#include <boost/numeric/bindings/uplo_tag.hpp>
#include <boost/numeric/bindings/value_type.hpp>
#include <type_traits>

//
// The LAPACK-backend for hptrd is the netlib-compatible backend.
//
#include <boost/numeric/bindings/lapack/detail/lapack.h>
#include <boost/numeric/bindings/lapack/detail/lapack_option.hpp>

namespace boost {
namespace numeric {
namespace bindings {
namespace lapack {

//
// The detail namespace contains value-type-overloaded functions that
// dispatch to the appropriate back-end LAPACK-routine.
//
namespace detail {

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<float> value-type.
//
template< typename UpLo >
inline std::ptrdiff_t hptrd( const UpLo uplo, const fortran_int_t n,
        std::complex<float>* ap, float* d, float* e,
        std::complex<float>* tau ) {
    fortran_int_t info(0);
#ifndef LAPACK_FORTRAN_STRLEN_END
    LAPACK_CHPTRD( &lapack_option< UpLo >::value, &n, ap, d, e, tau, &info );
#else
    LAPACK_CHPTRD( &lapack_option< UpLo >::value, &n, ap, d, e, tau, &info ,1 );
#endif
    return info;
}

//
// Overloaded function for dispatching to
// * netlib-compatible LAPACK backend (the default), and
// * complex<double> value-type.
//
template< typename UpLo >
inline std::ptrdiff_t hptrd( const UpLo uplo, const fortran_int_t n,
        std::complex<double>* ap, double* d, double* e,
        std::complex<double>* tau ) {
    fortran_int_t info(0);
#ifndef LAPACK_FORTRAN_STRLEN_END
    LAPACK_ZHPTRD( &lapack_option< UpLo >::value, &n, ap, d, e, tau, &info );
#else
    LAPACK_ZHPTRD( &lapack_option< UpLo >::value, &n, ap, d, e, tau, &info ,1 );
#endif
    return info;
}

} // namespace detail

//
// Value-type based template class. Use this class if you need a type
// for dispatching to hptrd.
//
template< typename Value >
struct hptrd_impl {

    typedef Value value_type;
    typedef typename remove_imaginary< Value >::type real_type;

    //
    // Static member function, that
    // * Deduces the required arguments for dispatching to LAPACK, and
    // * Asserts that most arguments make sense.
    //
    template< typename MatrixAP, typename VectorD, typename VectorE,
            typename VectorTAU >
    static std::ptrdiff_t invoke( MatrixAP& ap, VectorD& d, VectorE& e,
            VectorTAU& tau ) {
        namespace bindings = ::boost::numeric::bindings;
        typedef typename result_of::uplo_tag< MatrixAP >::type uplo;
        static_assert( (std::is_same< typename std::remove_const<
                typename bindings::value_type< VectorD >::type >::type,
                typename std::remove_const< typename bindings::value_type<
                VectorE >::type >::type >::value) );
        static_assert( (std::is_same< typename std::remove_const<
                typename bindings::value_type< MatrixAP >::type >::type,
                typename std::remove_const< typename bindings::value_type<
                VectorTAU >::type >::type >::value) );
        static_assert( (bindings::is_mutable< MatrixAP >::value) );
        static_assert( (bindings::is_mutable< VectorD >::value) );
        static_assert( (bindings::is_mutable< VectorE >::value) );
        static_assert( (bindings::is_mutable< VectorTAU >::value) );
        assert( bindings::size(d) >= bindings::size_column(ap) );
        assert( bindings::size(tau) >= bindings::size_column(ap)-1 );
        assert( bindings::size_column(ap) >= 0 );
        return detail::hptrd( uplo(), bindings::size_column(ap),
                bindings::begin_value(ap), bindings::begin_value(d),
                bindings::begin_value(e), bindings::begin_value(tau) );
    }

};


//
// Functions for direct use. These functions are overloaded for temporaries,
// so that wrapped types can still be passed and used for write-access. In
// addition, if applicable, they are overloaded for user-defined workspaces.
// Calls to these functions are passed to the hptrd_impl classes. In the 
// documentation, most overloads are collapsed to avoid a large number of
// prototypes which are very similar.
//

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * VectorD&
// * VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, VectorD& d, VectorE& e,
        VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * VectorD&
// * VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, VectorD& d, VectorE& e,
        VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * const VectorD&
// * VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, const VectorD& d, VectorE& e,
        VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * const VectorD&
// * VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, const VectorD& d,
        VectorE& e, VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * VectorD&
// * const VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, VectorD& d, const VectorE& e,
        VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * VectorD&
// * const VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, VectorD& d,
        const VectorE& e, VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * const VectorD&
// * const VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, const VectorD& d,
        const VectorE& e, VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * const VectorD&
// * const VectorE&
// * VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, const VectorD& d,
        const VectorE& e, VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * VectorD&
// * VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, VectorD& d, VectorE& e,
        const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * VectorD&
// * VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, VectorD& d, VectorE& e,
        const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * const VectorD&
// * VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, const VectorD& d, VectorE& e,
        const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * const VectorD&
// * VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, const VectorD& d,
        VectorE& e, const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * VectorD&
// * const VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, VectorD& d, const VectorE& e,
        const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * VectorD&
// * const VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, VectorD& d,
        const VectorE& e, const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * MatrixAP&
// * const VectorD&
// * const VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( MatrixAP& ap, const VectorD& d,
        const VectorE& e, const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

//
// Overloaded function for hptrd. Its overload differs for
// * const MatrixAP&
// * const VectorD&
// * const VectorE&
// * const VectorTAU&
//
template< typename MatrixAP, typename VectorD, typename VectorE,
        typename VectorTAU >
inline std::ptrdiff_t hptrd( const MatrixAP& ap, const VectorD& d,
        const VectorE& e, const VectorTAU& tau ) {
    return hptrd_impl< typename bindings::value_type<
            MatrixAP >::type >::invoke( ap, d, e, tau );
}

} // namespace lapack
} // namespace bindings
} // namespace numeric
} // namespace boost

#endif
